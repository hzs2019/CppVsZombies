
// 此文件将非常简单的介绍 C++类和对象 的相关知识

#include "pvz.h"

///////////////////////  首先声明，我的水平很低，所以下面如果有不恰当的说法还请谅解，（如果有错误最好是联系我呦，谢谢啦）

int main()
{
    // 首先我们先创建一个自动修补坚果对象
    // 我的修补坚果对象
    FixNut my_nut_fixer;

    // 类是对象的抽象，对象是类的实例，类包含了这一类事物的共同特征 （这句话一看貌似没一点用）
    // 实际上，类可以说成是 使用户能够定义类型的工具，我们可以从简单的定义变量来分析

    int x; // int 是整型类型，x是整型变量

    // 在使用关键字 int 定义整型变量时，int 不仅为 x 开辟了内存，而且规定了 x 的运算方法
    // 比如 x 可以参与 + - = * / % 这些运算，而由 float 定义的变量就不能参与 % 运算
    // 意思就是 int 中含有对整型变量的处理方法

    // 这时我们类比坚果对象，我们发现这两者的创建在语法上貌似没有区别
    // 但是很明显 my_nut_fixer x 这两者是有巨大的区别的，这种区别就是由 FixNut int 决定的
    // my_nut_fixer 可以进行修补坚果，但是 x 就不行，x可以进行加减运算，而 my_nut_fixer 就不行

    // 下面我们可以用创建的 my_nut_fixer 搞一些事情

    // 让 my_nut_fixer 开始在 {1, 3}, {1, 4} 修补小坚果
    my_nut_fixer.start(3, {{1, 3}, {1, 4}});

    // 让 my_nut_fixer 暂停修补小坚果
    my_nut_fixer.pause();

    // 让 my_nut_fixer 继续修补小坚果
    my_nut_fixer.goOn();

    // 重置 my_nut_fixer 的修补范围为 {2, 3}, {3, 4}
    my_nut_fixer.resetNutList({{2, 3}, {3, 4}});

    // 让 my_nut_fixer 停止修补小坚果
    my_nut_fixer.stop();

    // 说起来 my_nut_fixer 就像一个只会关于修补坚果的工人，用户给他下达指令，他就按着指令去做事情
    // 这时我们就知道了 FixNut 这个类里面包含的特征，而他创建出来的对象有着应对存冰这个"工作"的方法
    // FixNut 不能用来存冰，但是他创建出来的对象可以，就像 int 和整型变量的关系
    // int 不能参与算术运算，但是整型变量可以，说白了，类 只是记录着处理事情的方法，它本身是不能处理是事情的。

    return 0;
}